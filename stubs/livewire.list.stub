<?php

namespace {{namespace . "s"}};

use Livewire\Component;
use Livewire\WithPagination;
use App\Models\{{model}};
use Illuminate\Support\Facades\DB;

class {{class}} extends Component
{
    use WithPagination;

    protected $paginationTheme = 'bootstrap';

    public $search = '';
    public $readyToLoad = false;
    public $perPage = 10;

    protected $queryString = [
        'search' => ['except' => ''],
        'page' => ['except' => 1],
    ];

    protected $listeners = ['delete{{model}}Confirmed' => 'delete{{model}}'];

    public function mount()
    {
        $this->readyToLoad = true;
    }

    public function confirmDelete($id)
    {
        $this->dispatch('confirm-delete', id: $id);
    }

    public function delete{{model}}($id)
    {
        $item = {{model}}::findOrFail($id);
        $item->delete();
        $this->dispatch('show-alert', type: 'success', message: '{{modelLower}} حذف شد!');
    }

    public function updatedSearch()
    {
        $this->resetPage();
    }

    private function get{{modelPlural}}Query()
    {
        return {{model}}::where(function ($query) {
            $query->where('name', 'like', '%' . $this->search . '%')
                  ->orWhere('description', 'like', '%' . $this->search . '%')
                  ->orWhereRaw("CONCAT(name, ' ', description) LIKE ?", ['%' . $this->search . '%']);
        })->paginate($this->perPage);
    }

    public function render()
    {
        $items = $this->readyToLoad ? $this->get{{modelPlural}}Query() : collect();

        return view('livewire.{{prefix}}.panel.{{modelPluralKebab}}.{{modelKebab}}-list', [
            '{{modelPluralKebab}}' => $items,
        ]);
    }
}